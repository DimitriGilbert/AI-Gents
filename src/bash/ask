#!/bin/bash
# @parseArger-begin
# @parseArger-help "ask something to an AI" --option "help" --short-option "h"
# @parseArger-verbose --option "verbose" --level "0" --quiet-option "quiet"
_has_colors=0
if [ -t 1 ]; then # Check if stdout is a terminal
	ncolors=$(tput colors 2>/dev/null)
	if [ -n "$ncolors" ] && [ "$ncolors" -ge 8 ]; then
		_has_colors=1
	fi
fi
# @parseArger-declarations
# @parseArger pos prompt "what to ask"
# @parseArger opt api "api url"
# @parseArger opt api-key "api key"
# @parseArger opt model "model name"
# @parseArger opt system "system prompt"
# @parseArger opt conversation "chat history to be continued"
# @parseArger opt provider "LLM provider"
# @parseArger opt tools "tools param for http request"
# @parseArger opt tool_choice "tool_choice param for http request"
# @parseArger opt max_tokens "max_tokens param for http request"
# @parseArger opt temperature "temperature param for http request"
# @parseArger opt top_p "top_p param for http request"
# @parseArger opt stop "stop param for http request"
# @parseArger opt frequency_penalty "frequency_penalty param for http request"
# @parseArger opt presence_penalty "presence_penalty param for http request"
# @parseArger opt seed "seed param for http request"
# @parseArger opt logit_bias "logit_bias param for http request"
# @parseArger opt logprobs "logprobs param for http request"
# @parseArger opt top_logprobs "top_logprobs param for http request"
# @parseArger opt response_format "response_format param for http request"
# @parseArger opt structured_outputs "structured_outputs param for http request"
# @parseArger flag stream "stream to stdout"
# @parseArger-declarations-end

# @parseArger-utils
_helpHasBeenPrinted=1;
_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)";
# @parseArger-utils-end

# @parseArger-parsing

__cli_arg_count=$#;

die()
{
	local _ret=1
    if [[ -n "$2" ]] && [[ "$2" =~ ^[0-9]+$ ]]; then
   	_ret="$2"
    fi
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	log "$1" -3 >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options=''
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# POSITIONALS ARGUMENTS
_positionals=();
_optional_positionals=();
_arg_prompt="";
# OPTIONALS ARGUMENTS
_arg_api=
_arg_api_key=
_arg_model=
_arg_system=
_arg_conversation=
_arg_provider=
_arg_tools=
_arg_tool_choice=
_arg_max_tokens=
_arg_temperature=
_arg_top_p=
_arg_stop=
_arg_frequency_penalty=
_arg_presence_penalty=
_arg_seed=
_arg_logit_bias=
_arg_logprobs=
_arg_top_logprobs=
_arg_response_format=
_arg_structured_outputs=
# FLAGS
_arg_stream="off"
# NESTED
_verbose_level="0";



print_help()
{
	_triggerSCHelp=1;

	if [[ "$_helpHasBeenPrinted" == "1" ]]; then
		_helpHasBeenPrinted=0;
		echo -e "ask something to an AI:"
	echo -e "	prompt: what to ask"
	echo -e "	--api <api>: api url"
	echo -e "	--api-key <api-key>: api key"
	echo -e "	--model <model>: model name"
	echo -e "	--system <system>: system prompt"
	echo -e "	--conversation <conversation>: chat history to be continued"
	echo -e "	--provider <provider>: LLM provider"
	echo -e "	--tools <tools>: tools param for http request"
	echo -e "	--tool_choice <tool_choice>: tool_choice param for http request"
	echo -e "	--max_tokens <max_tokens>: max_tokens param for http request"
	echo -e "	--temperature <temperature>: temperature param for http request"
	echo -e "	--top_p <top_p>: top_p param for http request"
	echo -e "	--stop <stop>: stop param for http request"
	echo -e "	--frequency_penalty <frequency_penalty>: frequency_penalty param for http request"
	echo -e "	--presence_penalty <presence_penalty>: presence_penalty param for http request"
	echo -e "	--seed <seed>: seed param for http request"
	echo -e "	--logit_bias <logit_bias>: logit_bias param for http request"
	echo -e "	--logprobs <logprobs>: logprobs param for http request"
	echo -e "	--top_logprobs <top_logprobs>: top_logprobs param for http request"
	echo -e "	--response_format <response_format>: response_format param for http request"
	echo -e "	--structured_outputs <structured_outputs>: structured_outputs param for http request"
	echo -e "	--stream|--no-stream: stream to stdout"
	echo -e "Usage :
	$0 <prompt> [--api <value>] [--api-key <value>] [--model <value>] [--system <value>] [--conversation <value>] [--provider <value>] [--tools <value>] [--tool_choice <value>] [--max_tokens <value>] [--temperature <value>] [--top_p <value>] [--stop <value>] [--frequency_penalty <value>] [--presence_penalty <value>] [--seed <value>] [--logit_bias <value>] [--logprobs <value>] [--top_logprobs <value>] [--response_format <value>] [--structured_outputs <value>] [--[no-]stream]";
	fi

}

log() {
	local _arg_msg="${1}";
	local _arg_level="${2:-0}";
	if [ "${_arg_level}" -le "${_verbose_level}" ]; then
		case "$_arg_level" in
			-3)
				_arg_COLOR="\033[0;31m";
				;;
			-2)
				_arg_COLOR="\033[0;33m";
				;;
			-1)
				_arg_COLOR="\033[1;33m";
				;;
			1)
				_arg_COLOR="\033[0;32m";
				;;
			2)
				_arg_COLOR="\033[1;36m";
				;;
			3)
				_arg_COLOR="\033[0;36m";
				;;
			*)
				_arg_COLOR="\033[0m";
				;;
		esac
		if [ "${_has_colors}" == "1" ]; then
			echo -e "${_arg_COLOR}${_arg_msg}\033[0m";
		else
			echo "${_arg_msg}";
		fi
	fi
}

parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--api)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_api="$2"
				shift
				;;
			--api=*)
				_arg_api="${_key##--api=}"
				;;
			
			--api-key)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_api_key="$2"
				shift
				;;
			--api-key=*)
				_arg_api_key="${_key##--api-key=}"
				;;
			
			--model)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_model="$2"
				shift
				;;
			--model=*)
				_arg_model="${_key##--model=}"
				;;
			
			--system)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_system="$2"
				shift
				;;
			--system=*)
				_arg_system="${_key##--system=}"
				;;
			
			--conversation)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_conversation="$2"
				shift
				;;
			--conversation=*)
				_arg_conversation="${_key##--conversation=}"
				;;
			
			--provider)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_provider="$2"
				shift
				;;
			--provider=*)
				_arg_provider="${_key##--provider=}"
				;;
			
			--tools)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_tools="$2"
				shift
				;;
			--tools=*)
				_arg_tools="${_key##--tools=}"
				;;
			
			--tool_choice)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_tool_choice="$2"
				shift
				;;
			--tool_choice=*)
				_arg_tool_choice="${_key##--tool_choice=}"
				;;
			
			--max_tokens)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_max_tokens="$2"
				shift
				;;
			--max_tokens=*)
				_arg_max_tokens="${_key##--max_tokens=}"
				;;
			
			--temperature)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_temperature="$2"
				shift
				;;
			--temperature=*)
				_arg_temperature="${_key##--temperature=}"
				;;
			
			--top_p)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_top_p="$2"
				shift
				;;
			--top_p=*)
				_arg_top_p="${_key##--top_p=}"
				;;
			
			--stop)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_stop="$2"
				shift
				;;
			--stop=*)
				_arg_stop="${_key##--stop=}"
				;;
			
			--frequency_penalty)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_frequency_penalty="$2"
				shift
				;;
			--frequency_penalty=*)
				_arg_frequency_penalty="${_key##--frequency_penalty=}"
				;;
			
			--presence_penalty)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_presence_penalty="$2"
				shift
				;;
			--presence_penalty=*)
				_arg_presence_penalty="${_key##--presence_penalty=}"
				;;
			
			--seed)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_seed="$2"
				shift
				;;
			--seed=*)
				_arg_seed="${_key##--seed=}"
				;;
			
			--logit_bias)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_logit_bias="$2"
				shift
				;;
			--logit_bias=*)
				_arg_logit_bias="${_key##--logit_bias=}"
				;;
			
			--logprobs)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_logprobs="$2"
				shift
				;;
			--logprobs=*)
				_arg_logprobs="${_key##--logprobs=}"
				;;
			
			--top_logprobs)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_top_logprobs="$2"
				shift
				;;
			--top_logprobs=*)
				_arg_top_logprobs="${_key##--top_logprobs=}"
				;;
			
			--response_format)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_response_format="$2"
				shift
				;;
			--response_format=*)
				_arg_response_format="${_key##--response_format=}"
				;;
			
			--structured_outputs)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_structured_outputs="$2"
				shift
				;;
			--structured_outputs=*)
				_arg_structured_outputs="${_key##--structured_outputs=}"
				;;
			
			--stream)
				_arg_stream="on"
				;;
			--no-stream)
				_arg_stream="off"
				;;
			-h|--help)
				print_help;
				exit 0;
				;;
			-h*)
				print_help;
				exit 0;
				;;
			--verbose)
					if [ $# -lt 2 ];then
						_verbose_level="$((_verbose_level + 1))";
					else
						_verbose_level="$2";
						shift;
					fi
					;;
				--quiet)
					if [ $# -lt 2 ];then
						_verbose_level="$((_verbose_level - 1))";
					else
						_verbose_level="-$2";
						shift;
					fi
					;;
				
				*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="prompt"
	if [ "${_positionals_count}" -gt 1 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect at most 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}').\n\t${_positionals[*]}" 1
	fi
	if [ "${_positionals_count}" -lt 1 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 1 (namely: $_required_args_string), but got only ${_positionals_count}.
	${_positionals[*]}" 1;
	fi
}


assign_positional_args()
{
	local _positional_name _shift_for=$1;
	_positional_names="_arg_prompt ";
	shift "$_shift_for"
	for _positional_name in ${_positional_names};do
		test $# -gt 0 || break;
		eval "if [ \"\$_one_of${_positional_name}\" != \"\" ];then [[ \"\${_one_of${_positional_name}[*]}\" =~ \"\${1}\" ]];fi" || die "${_positional_name} must be one of: $(eval "echo \"\${_one_of${_positional_name}[*]}\"")" 1;
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an ParseArger bug." 1;
		shift;
	done
}

print_debug()
{
	print_help
	# shellcheck disable=SC2145
	echo "DEBUG: $0 $@";
	
	echo -e "	prompt: ${_arg_prompt}";
	echo -e "	api: ${_arg_api}";
	echo -e "	api-key: ${_arg_api_key}";
	echo -e "	model: ${_arg_model}";
	echo -e "	system: ${_arg_system}";
	echo -e "	conversation: ${_arg_conversation}";
	echo -e "	provider: ${_arg_provider}";
	echo -e "	tools: ${_arg_tools}";
	echo -e "	tool_choice: ${_arg_tool_choice}";
	echo -e "	max_tokens: ${_arg_max_tokens}";
	echo -e "	temperature: ${_arg_temperature}";
	echo -e "	top_p: ${_arg_top_p}";
	echo -e "	stop: ${_arg_stop}";
	echo -e "	frequency_penalty: ${_arg_frequency_penalty}";
	echo -e "	presence_penalty: ${_arg_presence_penalty}";
	echo -e "	seed: ${_arg_seed}";
	echo -e "	logit_bias: ${_arg_logit_bias}";
	echo -e "	logprobs: ${_arg_logprobs}";
	echo -e "	top_logprobs: ${_arg_top_logprobs}";
	echo -e "	response_format: ${_arg_response_format}";
	echo -e "	structured_outputs: ${_arg_structured_outputs}";
	echo -e "	stream: ${_arg_stream}";

}


on_interrupt() {
	die Process aborted! 130;
}


parse_commandline "$@";
handle_passed_args_count;
assign_positional_args 1 "${_positionals[@]}";
trap on_interrupt INT;



# @parseArger-parsing-end
# print_debug "$@"
# @parseArger-end

source "$_SCRIPT_DIR/common"

resp_line=""
tmp_response="$(TMPDIR="${TMPDIR:-/tmp}" mktemp </dev/null)" || return 1
tmp_payload="$(TMPDIR="${TMPDIR:-/tmp}" mktemp </dev/null)" || return 1

_streamVal="false"
if [ "$_arg_stream" == "on" ]; then
	_streamVal="true"
fi

# Extract provider before creating payload
if [ "$_arg_provider" = "" ]; then
	if [[ "$_arg_model" == *":"* && "$_arg_model" != *":free"* ]]; then
		_arg_provider="${_arg_model%%:*}"
		_arg_model="${_arg_model#*:}"
	else
		_arg_provider="$AI_DEFAULT_PROVIDER"
	fi
fi

if [ "$_arg_model" = "" ]; then
	_arg_model="$(get_default_model "$_arg_provider")"
fi

# die "$_arg_provider $_arg_model" 0

if [ "$_arg_provider" != "" ]; then
	_arg_api="$(get_llm_provider_url "$_arg_provider")/chat/completions"
fi

#  extract commands between #!/ and ; from user prompt
_arg_prompt_cmds=()
matches=()
prompt_copy="$_arg_prompt"
while [[ "$prompt_copy" =~ \#\!/([^;]+)\; ]]; do
	pcmd="${BASH_REMATCH[1]}"
	matches+=("${BASH_REMATCH[0]}")
	_arg_prompt_cmds+=("$pcmd")
	prompt_copy="${prompt_copy//"${BASH_REMATCH[0]}"/ }"
done

if [ "${#_arg_prompt_cmds[@]}" -gt 0 ]; then
	# for each line, fill an array with each command and its arguments
	for i in "${!_arg_prompt_cmds[@]}"; do
		match="${matches[$i]}"
		# split the command into an array
		read -ra _tmpCmd <<<"${_arg_prompt_cmds[$i]}"
		# execute the command and get its output
		to_put_in_arg_prompt="$("${_tmpCmd[@]}" 2>&1)"

		if [ $? -ne 0 ]; then
			log "\nCommand failed: ${_tmpCmd[*]}\n$to_put_in_arg_prompt\n" -2
		else
			# replace the match with the output of the command
			_arg_prompt="${_arg_prompt//$match/$to_put_in_arg_prompt}"
		fi
	done
fi

# die "$_arg_prompt" 0

# Create the JSON payload using jq to handle all escaping
if [ "$_arg_conversation" != "" ]; then
	# Read messages from conversation file
	messages="["
	while IFS= read -r line; do
		if [ -n "$line" ]; then
			if [ "$messages" != "[" ]; then
				messages="$messages,"
			fi
			messages="$messages$line"
		fi
	done <"$_arg_conversation"

	# Add current user message
	if [ "$messages" != "[" ]; then
		messages="$messages,"
	fi
	messages="$messages{\"role\": \"user\", \"content\": $(jq -R -s '.' <<<"$_arg_prompt")}"
	messages="$messages]"

	# Create payload with conversation history
	printf '{
		"model": "%s",
		"messages": %s,
		"stream": %s
	}' "${_arg_model,,}" "$messages" "$_streamVal" >"$tmp_payload"
elif [ "$_arg_system" != "" ] && [ "$_arg_prompt" != "" ]; then
	jq -R -s '.' <<<"$_arg_system" >"$tmp_payload.system"
	jq -R -s '.' <<<"$_arg_prompt" >"$tmp_payload.user"
	printf '{
		"model": "%s",
		"messages": [
			{"role": "system", "content": %s},
			{"role": "user", "content": %s}
		],
		"stream": %s
	}' "${_arg_model,,}" "$(cat "$tmp_payload.system" </dev/null)" "$(cat "$tmp_payload.user" </dev/null)" "$_streamVal" >"$tmp_payload"
	rm -f "$tmp_payload.system" "$tmp_payload.user"
else
	# Just the user message
	printf '{
		"model": "%s",
		"messages": [
			{"role": "user", "content": %s}
		],
		"stream": %s
		%s
	}' "${_arg_model,,}" "$(jq -R -s '.' <<<"$_arg_prompt")" "$_streamVal" "$(
	{
		[ "$_arg_tools" != "" ] && printf ',\n\t"tools": %s' "$_arg_tools"
		[ "$_arg_tool_choice" != "" ] && printf ',\n\t"tool_choice": %s' "$_arg_tool_choice"
		[ "$_arg_max_tokens" != "" ] && printf ',\n\t"max_tokens": %s' "$_arg_max_tokens"
		[ "$_arg_temperature" != "" ] && printf ',\n\t"temperature": %s' "$_arg_temperature"
		[ "$_arg_top_p" != "" ] && printf ',\n\t"top_p": %s' "$_arg_top_p"
		[ "$_arg_stop" != "" ] && printf ',\n\t"stop": %s' "$_arg_stop"
		[ "$_arg_frequency_penalty" != "" ] && printf ',\n\t"frequency_penalty": %s' "$_arg_frequency_penalty"
		[ "$_arg_presence_penalty" != "" ] && printf ',\n\t"presence_penalty": %s' "$_arg_presence_penalty"
		[ "$_arg_seed" != "" ] && printf ',\n\t"seed": %s' "$_arg_seed"
		[ "$_arg_logit_bias" != "" ] && printf ',\n\t"logit_bias": %s' "$_arg_logit_bias"
		[ "$_arg_logprobs" != "" ] && printf ',\n\t"logprobs": %s' "$_arg_logprobs"
		[ "$_arg_top_logprobs" != "" ] && printf ',\n\t"top_logprobs": %s' "$_arg_top_logprobs"
		[ "$_arg_response_format" != "" ] && printf ',\n\t"response_format": %s' "$_arg_response_format"
		[ "$_arg_structured_outputs" != "" ] && printf ',\n\t"structured_outputs": %s' "$_arg_structured_outputs"
	} | tr -d '\n'
)" >"$tmp_payload"
fi

if [ "$_arg_api" = "" ]; then
	die "Error: API endpoint must not be empty" -2
fi

if [[ "$_arg_api" != */chat/completions ]]; then
	_arg_api="$_arg_api/chat/completions"
fi

# Get API key from credentials if not provided
if [ "$_arg_api_key" = "" ] && [ "$_arg_provider" != "" ]; then
	_arg_api_key="$(get_provider_credential "$_arg_provider")"
fi

# Send the request and stream response
curl_cmd=(curl -f -X POST "$_arg_api"
	-H "Content-Type: application/json"
	-d "@${tmp_payload}")

if [ "$_arg_api_key" != "" ]; then
	curl_cmd+=(-H "Authorization: Bearer $_arg_api_key")
fi
# die "${curl_cmd[*]}" 0
if [ "$_arg_stream" == "on" ]; then
	curl_cmd+=(-N)
	# Execute curl and process response
	"${curl_cmd[@]}" 2>/dev/null | while IFS= read -r resp_line || [ -n "$resp_line" ]; do
		if [ "${resp_line:0:5}" = "data:" ]; then
			resp_line="${resp_line#data: }"
			if [ "$resp_line" != "" ] && [ "$resp_line" != "[DONE]" ]; then
				printf '%s' "$resp_line" >>"$tmp_response"
				# Check for error response
				if [[ "$resp_line" =~ \"error\":\{.*\"message\":\"([^\"]*)\" ]]; then
					error_msg="${BASH_REMATCH[1]}"
					die "API Error: $error_msg" -2
				fi
				# Extract content using jq for more reliable parsing
				content=$(echo "$resp_line" | jq -r '.choices[0].delta.content // ""')
				if [ -n "$content" ]; then
					# Handle special characters and formatting
					content="${content//\\\"/\"}"
					content="${content//\\n/$'\n'}"
					content="${content//\\t/$'\t'}"
					printf '%b' "$content" >>"$tmp_response"
					content="${content//<think>/\\e[38;5;4m}"
					content="${content//<\/think>/\\e[0m}"
					printf '%b' "$content"
				fi
			fi
		fi
	done
	status=$?
	if [ $status -ne 0 ]; then
		die "API Error: Request failed with status $status" -2
	fi
	printf '\n'
else
	curl_cmd+=(-w "\n%{http_code}")
	# Execute curl without streaming and process response
	response="$("${curl_cmd[@]}" 2>/dev/null)"
	http_code=$(echo "$response" | tail -n1)
	response=$(echo "$response" | head -n -1)

	# Check for error in response
	if [ -n "$response" ]; then
		if [[ "$response" =~ \"error\":\{.*\"message\":\"([^\"]*)\" ]]; then
			error_msg="${BASH_REMATCH[1]}"
			die "API Error: $error_msg" -2
		fi
	fi

	if [ "$http_code" != "200" ]; then
		die "API Error: HTTP status code $http_code" -2
	fi

	if [ -n "$response" ]; then
		# Extract content without using jq
		if [[ "$response" =~ \"content\":\"([^\"]+)\" ]]; then
			content="${BASH_REMATCH[1]}"
			# Replace escaped characters with their actual values
			content="${content//\\\"/\"}"
			content="${content//\\n/$'\n'}"
			content="${content//\\t/$'\t'}"
			printf '%b' "$content"
		fi
	fi
fi
# echo "$tmp_payload"
# Remove temporary files
rm -f "$tmp_response" "$tmp_payload"
