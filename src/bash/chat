#!/bin/bash
# @parseArger-begin
# @parseArger-help "Chat with an AI" --option "help" --short-option "h"
# @parseArger-verbose --option "verbose" --level "0" --quiet-option "quiet"
_has_colors=0
if [ -t 1 ]; then # Check if stdout is a terminal
	ncolors=$(tput colors 2>/dev/null)
	if [ -n "$ncolors" ] && [ "$ncolors" -ge 8 ]; then
		_has_colors=1
	fi
fi
# @parseArger-declarations
# @parseArger pos prompt "what to ask"
# @parseArger opt api "api url"
# @parseArger opt api-key "api key"
# @parseArger opt model "model name"
# @parseArger opt system "system prompt"
# @parseArger opt conversation "chat history to be continued"
# @parseArger opt provider "LLM provider"
# @parseArger opt user "username" --default-value "didi"
# @parseArger opt ai-name "AI name" --default-value "AI"
# @parseArger opt title "chat title, force log"
# @parseArger opt log "log file for the chat"
# @parseArger opt tools "tools param for http request"
# @parseArger opt tool_choice "tool_choice param for http request"
# @parseArger opt max_tokens "max_tokens param for http request"
# @parseArger opt temperature "temperature param for http request"
# @parseArger opt top_p "top_p param for http request"
# @parseArger opt stop "stop param for http request"
# @parseArger opt frequency_penalty "frequency_penalty param for http request"
# @parseArger opt presence_penalty "presence_penalty param for http request"
# @parseArger opt seed "seed param for http request"
# @parseArger opt logit_bias "logit_bias param for http request"
# @parseArger opt logprobs "logprobs param for http request"
# @parseArger opt top_logprobs "top_logprobs param for http request"
# @parseArger opt response_format "response_format param for http request"
# @parseArger opt structured_outputs "structured_outputs param for http request"
# @parseArger-declarations-end

# @parseArger-utils
_helpHasBeenPrinted=1;
_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)";
# @parseArger-utils-end

# @parseArger-parsing

__cli_arg_count=$#;

die()
{
	local _ret=1
    if [[ -n "$2" ]] && [[ "$2" =~ ^[0-9]+$ ]]; then
   	_ret="$2"
    fi
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	log "$1" -3 >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options=''
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# POSITIONALS ARGUMENTS
_positionals=();
_optional_positionals=();
_arg_prompt="";
# OPTIONALS ARGUMENTS
_arg_api=
_arg_api_key=
_arg_model=
_arg_system=
_arg_conversation=
_arg_provider=
_arg_user="didi"
_arg_ai_name="AI"
_arg_title=
_arg_log=
_arg_tools=
_arg_tool_choice=
_arg_max_tokens=
_arg_temperature=
_arg_top_p=
_arg_stop=
_arg_frequency_penalty=
_arg_presence_penalty=
_arg_seed=
_arg_logit_bias=
_arg_logprobs=
_arg_top_logprobs=
_arg_response_format=
_arg_structured_outputs=
# FLAGS
# NESTED
_verbose_level="0";



print_help()
{
	_triggerSCHelp=1;

	if [[ "$_helpHasBeenPrinted" == "1" ]]; then
		_helpHasBeenPrinted=0;
		echo -e "Chat with an AI:"
	echo -e "	prompt: what to ask"
	echo -e "	--api <api>: api url"
	echo -e "	--api-key <api-key>: api key"
	echo -e "	--model <model>: model name"
	echo -e "	--system <system>: system prompt"
	echo -e "	--conversation <conversation>: chat history to be continued"
	echo -e "	--provider <provider>: LLM provider"
	echo -e "	--user <user>: username [default: ' didi ']"
	echo -e "	--ai-name <ai-name>: AI name [default: ' AI ']"
	echo -e "	--title <title>: chat title, force log"
	echo -e "	--log <log>: log file for the chat"
	echo -e "	--tools <tools>: tools param for http request"
	echo -e "	--tool_choice <tool_choice>: tool_choice param for http request"
	echo -e "	--max_tokens <max_tokens>: max_tokens param for http request"
	echo -e "	--temperature <temperature>: temperature param for http request"
	echo -e "	--top_p <top_p>: top_p param for http request"
	echo -e "	--stop <stop>: stop param for http request"
	echo -e "	--frequency_penalty <frequency_penalty>: frequency_penalty param for http request"
	echo -e "	--presence_penalty <presence_penalty>: presence_penalty param for http request"
	echo -e "	--seed <seed>: seed param for http request"
	echo -e "	--logit_bias <logit_bias>: logit_bias param for http request"
	echo -e "	--logprobs <logprobs>: logprobs param for http request"
	echo -e "	--top_logprobs <top_logprobs>: top_logprobs param for http request"
	echo -e "	--response_format <response_format>: response_format param for http request"
	echo -e "	--structured_outputs <structured_outputs>: structured_outputs param for http request"
	echo -e "Usage :
	$0 <prompt> [--api <value>] [--api-key <value>] [--model <value>] [--system <value>] [--conversation <value>] [--provider <value>] [--user <value>] [--ai-name <value>] [--title <value>] [--log <value>] [--tools <value>] [--tool_choice <value>] [--max_tokens <value>] [--temperature <value>] [--top_p <value>] [--stop <value>] [--frequency_penalty <value>] [--presence_penalty <value>] [--seed <value>] [--logit_bias <value>] [--logprobs <value>] [--top_logprobs <value>] [--response_format <value>] [--structured_outputs <value>]";
	fi

}

log() {
	local _arg_msg="${1}";
	local _arg_level="${2:-0}";
	if [ "${_arg_level}" -le "${_verbose_level}" ]; then
		case "$_arg_level" in
			-3)
				_arg_COLOR="\033[0;31m";
				;;
			-2)
				_arg_COLOR="\033[0;33m";
				;;
			-1)
				_arg_COLOR="\033[1;33m";
				;;
			1)
				_arg_COLOR="\033[0;32m";
				;;
			2)
				_arg_COLOR="\033[1;36m";
				;;
			3)
				_arg_COLOR="\033[0;36m";
				;;
			*)
				_arg_COLOR="\033[0m";
				;;
		esac
		if [ "${_has_colors}" == "1" ]; then
			echo -e "${_arg_COLOR}${_arg_msg}\033[0m";
		else
			echo "${_arg_msg}";
		fi
	fi
}

parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--api)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_api="$2"
				shift
				;;
			--api=*)
				_arg_api="${_key##--api=}"
				;;
			
			--api-key)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_api_key="$2"
				shift
				;;
			--api-key=*)
				_arg_api_key="${_key##--api-key=}"
				;;
			
			--model)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_model="$2"
				shift
				;;
			--model=*)
				_arg_model="${_key##--model=}"
				;;
			
			--system)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_system="$2"
				shift
				;;
			--system=*)
				_arg_system="${_key##--system=}"
				;;
			
			--conversation)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_conversation="$2"
				shift
				;;
			--conversation=*)
				_arg_conversation="${_key##--conversation=}"
				;;
			
			--provider)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_provider="$2"
				shift
				;;
			--provider=*)
				_arg_provider="${_key##--provider=}"
				;;
			
			--user)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_user="$2"
				shift
				;;
			--user=*)
				_arg_user="${_key##--user=}"
				;;
			
			--ai-name)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_ai_name="$2"
				shift
				;;
			--ai-name=*)
				_arg_ai_name="${_key##--ai-name=}"
				;;
			
			--title)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_title="$2"
				shift
				;;
			--title=*)
				_arg_title="${_key##--title=}"
				;;
			
			--log)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_log="$2"
				shift
				;;
			--log=*)
				_arg_log="${_key##--log=}"
				;;
			
			--tools)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_tools="$2"
				shift
				;;
			--tools=*)
				_arg_tools="${_key##--tools=}"
				;;
			
			--tool_choice)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_tool_choice="$2"
				shift
				;;
			--tool_choice=*)
				_arg_tool_choice="${_key##--tool_choice=}"
				;;
			
			--max_tokens)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_max_tokens="$2"
				shift
				;;
			--max_tokens=*)
				_arg_max_tokens="${_key##--max_tokens=}"
				;;
			
			--temperature)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_temperature="$2"
				shift
				;;
			--temperature=*)
				_arg_temperature="${_key##--temperature=}"
				;;
			
			--top_p)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_top_p="$2"
				shift
				;;
			--top_p=*)
				_arg_top_p="${_key##--top_p=}"
				;;
			
			--stop)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_stop="$2"
				shift
				;;
			--stop=*)
				_arg_stop="${_key##--stop=}"
				;;
			
			--frequency_penalty)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_frequency_penalty="$2"
				shift
				;;
			--frequency_penalty=*)
				_arg_frequency_penalty="${_key##--frequency_penalty=}"
				;;
			
			--presence_penalty)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_presence_penalty="$2"
				shift
				;;
			--presence_penalty=*)
				_arg_presence_penalty="${_key##--presence_penalty=}"
				;;
			
			--seed)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_seed="$2"
				shift
				;;
			--seed=*)
				_arg_seed="${_key##--seed=}"
				;;
			
			--logit_bias)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_logit_bias="$2"
				shift
				;;
			--logit_bias=*)
				_arg_logit_bias="${_key##--logit_bias=}"
				;;
			
			--logprobs)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_logprobs="$2"
				shift
				;;
			--logprobs=*)
				_arg_logprobs="${_key##--logprobs=}"
				;;
			
			--top_logprobs)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_top_logprobs="$2"
				shift
				;;
			--top_logprobs=*)
				_arg_top_logprobs="${_key##--top_logprobs=}"
				;;
			
			--response_format)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_response_format="$2"
				shift
				;;
			--response_format=*)
				_arg_response_format="${_key##--response_format=}"
				;;
			
			--structured_outputs)
				test $# -lt 2 && die "Missing value for the option: '$_key'" 1
				_arg_structured_outputs="$2"
				shift
				;;
			--structured_outputs=*)
				_arg_structured_outputs="${_key##--structured_outputs=}"
				;;
			
			-h|--help)
				print_help;
				exit 0;
				;;
			-h*)
				print_help;
				exit 0;
				;;
			--verbose)
					if [ $# -lt 2 ];then
						_verbose_level="$((_verbose_level + 1))";
					else
						_verbose_level="$2";
						shift;
					fi
					;;
				--quiet)
					if [ $# -lt 2 ];then
						_verbose_level="$((_verbose_level - 1))";
					else
						_verbose_level="-$2";
						shift;
					fi
					;;
				
				*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="prompt"
	if [ "${_positionals_count}" -gt 1 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect at most 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}').\n\t${_positionals[*]}" 1
	fi
	if [ "${_positionals_count}" -lt 1 ] && [ "$_helpHasBeenPrinted" == "1" ];then
		_PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 1 (namely: $_required_args_string), but got only ${_positionals_count}.
	${_positionals[*]}" 1;
	fi
}


assign_positional_args()
{
	local _positional_name _shift_for=$1;
	_positional_names="_arg_prompt ";
	shift "$_shift_for"
	for _positional_name in ${_positional_names};do
		test $# -gt 0 || break;
		eval "if [ \"\$_one_of${_positional_name}\" != \"\" ];then [[ \"\${_one_of${_positional_name}[*]}\" =~ \"\${1}\" ]];fi" || die "${_positional_name} must be one of: $(eval "echo \"\${_one_of${_positional_name}[*]}\"")" 1;
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an ParseArger bug." 1;
		shift;
	done
}

print_debug()
{
	print_help
	# shellcheck disable=SC2145
	echo "DEBUG: $0 $@";
	
	echo -e "	prompt: ${_arg_prompt}";
	echo -e "	api: ${_arg_api}";
	echo -e "	api-key: ${_arg_api_key}";
	echo -e "	model: ${_arg_model}";
	echo -e "	system: ${_arg_system}";
	echo -e "	conversation: ${_arg_conversation}";
	echo -e "	provider: ${_arg_provider}";
	echo -e "	user: ${_arg_user}";
	echo -e "	ai-name: ${_arg_ai_name}";
	echo -e "	title: ${_arg_title}";
	echo -e "	log: ${_arg_log}";
	echo -e "	tools: ${_arg_tools}";
	echo -e "	tool_choice: ${_arg_tool_choice}";
	echo -e "	max_tokens: ${_arg_max_tokens}";
	echo -e "	temperature: ${_arg_temperature}";
	echo -e "	top_p: ${_arg_top_p}";
	echo -e "	stop: ${_arg_stop}";
	echo -e "	frequency_penalty: ${_arg_frequency_penalty}";
	echo -e "	presence_penalty: ${_arg_presence_penalty}";
	echo -e "	seed: ${_arg_seed}";
	echo -e "	logit_bias: ${_arg_logit_bias}";
	echo -e "	logprobs: ${_arg_logprobs}";
	echo -e "	top_logprobs: ${_arg_top_logprobs}";
	echo -e "	response_format: ${_arg_response_format}";
	echo -e "	structured_outputs: ${_arg_structured_outputs}";

}


on_interrupt() {
	die Process aborted! 130;
}


parse_commandline "$@";
handle_passed_args_count;
assign_positional_args 1 "${_positionals[@]}";
trap on_interrupt INT;



# @parseArger-parsing-end
# print_debug "$@"
# @parseArger-end

source "$_SCRIPT_DIR/common"

# Create log file if title is provided or logging is enabled
log_file=""
if [ "$_arg_title" != "" ] || [ "$_arg_log" != "" ]; then
    if [ "$_arg_log" != "" ]; then
        log_file="$_arg_log"
    else
        timestamp=$(date +%Y-%m-%d-%H-%M-%S)
        title_slug="${_arg_title:-chat}"
        title_slug="${title_slug// /-}"
        log_file="${title_slug}-${timestamp}.md"
    fi
    
    # Initialize markdown file with title
    printf "# %s\n\n" "${_arg_title:-Chat}" > "$log_file"
    
    # Add system prompt to log if present
    if [ "$_arg_system" != "" ]; then
        printf "## System\n\n%s\n" "$_arg_system" >> "$log_file"
    fi
fi

# Function to append to log file
append_to_log() {
    local role="$1"
    local content="$2"
    local timestamp="$3"
    
    if [ "$log_file" != "" ]; then
        {
            printf "\n### %s" "$role"
            if [ "$timestamp" != "" ]; then
                printf " (%s)" "$timestamp"
            fi
            printf "\n\n%s\n" "$content"
        } >> "$log_file"
    fi
}

# Start interactive chat
conversation_file="$(TMPDIR="${TMPDIR:-/tmp}" mktemp)"
messages_file="$(TMPDIR="${TMPDIR:-/tmp}" mktemp)"
[ "$_arg_conversation" != "" ] && cat "$_arg_conversation" > "$conversation_file"

# Initialize messages array if we have a system prompt
if [ "$_arg_system" != "" ]; then
    printf '{"role": "system", "content": %s}\n' "$(jq -R -s '.' <<<"$_arg_system")" > "$messages_file"
fi

# Initial prompt handling
if [ "$_arg_prompt" != "" ]; then
    append_to_log "$_arg_user" "$_arg_prompt"
    
    # Add user message to messages array
    printf '{"role": "user", "content": %s}\n' "$(jq -R -s '.' <<<"$_arg_prompt")" >> "$messages_file"
    
    start_time=$(date +%s)
    response=""
    # Execute ask command and capture its output while allowing it to stream to terminal
    printf "%s > " "$_arg_ai_name"
    response=$("$_SCRIPT_DIR/ask" --stream "$_arg_prompt" ${_arg_api:+--api "$_arg_api"} ${_arg_api_key:+--api-key "$_arg_api_key"} ${_arg_model:+--model "$_arg_model"} ${_arg_system:+--system "$_arg_system"} ${_arg_provider:+--provider "$_arg_provider"} | tee /dev/tty)
    end_time=$(date +%s)
    gen_time=$((end_time - start_time))
    
    # Add assistant response to messages array
    printf '{"role": "assistant", "content": %s}\n' "$(jq -R -s '.' <<<"$response")" >> "$messages_file"
    
    append_to_log "$_arg_ai_name" "$response" "${gen_time}s"
fi

while true; do
    # new line for clarity
    echo
    # Get user input with rlwrap
    user_input="$(rlwrap -H "$conversation_file" -S "${_arg_user} > " bash -c 'read -r line && echo "${line}"')"
    
    # Check for empty input or Ctrl+D
    if [ -z "$user_input" ]; then
        echo "Goodbye!"
        break
    fi
    
    # Log user input
    # append_to_log "$_arg_user" "$user_input"
    
    # Add user message to messages array
    printf '{"role": "user", "content": %s}\n' "$(jq -R -s '.' <<<"$user_input")" >> "$messages_file"
    
    # Get AI response with timing
    start_time=$(date +%s)
    response=""
    
    # Execute ask command and capture its output while allowing it to stream to terminal
    ask_cmd=("$_SCRIPT_DIR/ask" --stream "$user_input")
    [[ -n "$_arg_api" ]] && ask_cmd+=(--api "$_arg_api")
    [[ -n "$_arg_api_key" ]] && ask_cmd+=(--api-key "$_arg_api_key")
    [[ -n "$_arg_model" ]] && ask_cmd+=(--model "$_arg_model")
    [[ -n "$_arg_system" ]] && ask_cmd+=(--system "$_arg_system")
    [[ -n "$messages_file" ]] && ask_cmd+=(--conversation "$messages_file")
    [[ -n "$_arg_provider" ]] && ask_cmd+=(--provider "$_arg_provider")
    [[ -n "$_arg_log" ]] && ask_cmd+=(--log "$_arg_log")
    [[ -n "$_arg_tools" ]] && ask_cmd+=(--tools "$_arg_tools")
    [[ -n "$_arg_tool_choice" ]] && ask_cmd+=(--tool_choice "$_arg_tool_choice")
    [[ -n "$_arg_max_tokens" ]] && ask_cmd+=(--max_tokens "$_arg_max_tokens")
    [[ -n "$_arg_temperature" ]] && ask_cmd+=(--temperature "$_arg_temperature")
    [[ -n "$_arg_top_p" ]] && ask_cmd+=(--top_p "$_arg_top_p")
    [[ -n "$_arg_stop" ]] && ask_cmd+=(--stop "$_arg_stop")
    [[ -n "$_arg_frequency_penalty" ]] && ask_cmd+=(--frequency_penalty "$_arg_frequency_penalty")
    [[ -n "$_arg_presence_penalty" ]] && ask_cmd+=(--presence_penalty "$_arg_presence_penalty")
    [[ -n "$_arg_seed" ]] && ask_cmd+=(--seed "$_arg_seed")
    [[ -n "$_arg_logit_bias" ]] && ask_cmd+=(--logit_bias "$_arg_logit_bias")
    [[ -n "$_arg_logprobs" ]] && ask_cmd+=(--logprobs "$_arg_logprobs")
    [[ -n "$_arg_top_logprobs" ]] && ask_cmd+=(--top_logprobs "$_arg_top_logprobs")
    [[ -n "$_arg_response_format" ]] && ask_cmd+=(--response_format "$_arg_response_format")
    [[ -n "$_arg_structured_outputs" ]] && ask_cmd+=(--structured_outputs "$_arg_structured_outputs")
		
    
    # new line for clarity
    echo
    printf "%s > " "$_arg_ai_name"
    response=$("${ask_cmd[@]}" | tee /dev/tty)
    
    end_time=$(date +%s)
    gen_time=$((end_time - start_time))
    
    # Add assistant response to messages array
    printf '{"role": "assistant", "content": %s}\n' "$(jq -R -s '.' <<<"$response")" >> "$messages_file"
    
    # Log AI response with generation time
    # append_to_log "$_arg_ai_name" "$response" "${gen_time}s"
    
    # Update conversation history for rlwrap
    {
        echo "$user_input"
        echo "$response"
    } >> "$conversation_file"
done

# Cleanup
rm -f "$conversation_file" "$messages_file"
