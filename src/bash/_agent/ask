#!/bin/bash
# @parseArger-begin
# @parseArger-help "ask an AI agent" --option "help" --short-option "h"
# @parseArger-verbose --option "verbose" --level "0" --quiet-option "quiet"
_has_colors=0
if [ -t 1 ]; then # Check if stdout is a terminal
	ncolors=$(tput colors 2>/dev/null)
	if [ -n "$ncolors" ] && [ "$ncolors" -ge 8 ]; then
		_has_colors=1
	fi
fi
# @parseArger-declarations
# @parseArger pos agent "existing agent name, agent file path or url"
# @parseArger pos prompt "what to ask"
# @parseArger opt api "api url"
# @parseArger opt api-key "api key"
# @parseArger opt model "model name"
# @parseArger opt system "system prompt"
# @parseArger opt conversation "chat history to be continued"
# @parseArger opt provider "LLM provider"
# @parseArger flag stream "stream to stdout"
# @parseArger-declarations-end

# @parseArger-utils
_helpHasBeenPrinted=1
_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)"
# @parseArger-utils-end

# @parseArger-parsing

__cli_arg_count=$#

die() {
	local _ret=1
	if [[ -n "$2" ]] && [[ "$2" =~ ^[0-9]+$ ]]; then
		_ret="$2"
	fi
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	log "$1" -3 >&2
	exit "${_ret}"
}

begins_with_short_option() {
	local first_option all_short_options=''
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# POSITIONALS ARGUMENTS
_positionals=()
_optional_positionals=()
_arg_agent=""
_arg_prompt=""
# OPTIONALS ARGUMENTS
_arg_api=
_arg_api_key=
_arg_model=
_arg_system=
_arg_conversation=
_arg_provider=
# FLAGS
_arg_stream="off"
# NESTED
_verbose_level="0"

print_help() {
	_triggerSCHelp=1

	if [[ "$_helpHasBeenPrinted" == "1" ]]; then
		_helpHasBeenPrinted=0
		echo -e "ask an AI agent:"
		echo -e "	agent: existing agent name, agent file path or url"
		echo -e "	prompt: what to ask"
		echo -e "	--api <api>: api url"
		echo -e "	--api-key <api-key>: api key"
		echo -e "	--model <model>: model name"
		echo -e "	--system <system>: system prompt"
		echo -e "	--conversation <conversation>: chat history to be continued"
		echo -e "	--provider <provider>: LLM provider"
		echo -e "	--stream|--no-stream: stream to stdout"
		echo -e "Usage :
	$0 <agent> <prompt> [--api <value>] [--api-key <value>] [--model <value>] [--system <value>] [--conversation <value>] [--provider <value>] [--[no-]stream]"
	fi

}

log() {
	local _arg_msg="${1}"
	local _arg_level="${2:-0}"
	if [ "${_arg_level}" -le "${_verbose_level}" ]; then
		case "$_arg_level" in
		-3)
			_arg_COLOR="\033[0;31m"
			;;
		-2)
			_arg_COLOR="\033[0;33m"
			;;
		-1)
			_arg_COLOR="\033[1;33m"
			;;
		1)
			_arg_COLOR="\033[0;32m"
			;;
		2)
			_arg_COLOR="\033[1;36m"
			;;
		3)
			_arg_COLOR="\033[0;36m"
			;;
		*)
			_arg_COLOR="\033[0m"
			;;
		esac
		if [ "${_has_colors}" == "1" ]; then
			echo -e "${_arg_COLOR}${_arg_msg}\033[0m"
		else
			echo "${_arg_msg}"
		fi
	fi
}

parse_commandline() {
	_positionals_count=0
	while test $# -gt 0; do
		_key="$1"
		case "$_key" in
		--api)
			test $# -lt 2 && die "Missing value for the option: '$_key'" 1
			_arg_api="$2"
			shift
			;;
		--api=*)
			_arg_api="${_key##--api=}"
			;;

		--api-key)
			test $# -lt 2 && die "Missing value for the option: '$_key'" 1
			_arg_api_key="$2"
			shift
			;;
		--api-key=*)
			_arg_api_key="${_key##--api-key=}"
			;;

		--model)
			test $# -lt 2 && die "Missing value for the option: '$_key'" 1
			_arg_model="$2"
			shift
			;;
		--model=*)
			_arg_model="${_key##--model=}"
			;;

		--system)
			test $# -lt 2 && die "Missing value for the option: '$_key'" 1
			_arg_system="$2"
			shift
			;;
		--system=*)
			_arg_system="${_key##--system=}"
			;;

		--conversation)
			test $# -lt 2 && die "Missing value for the option: '$_key'" 1
			_arg_conversation="$2"
			shift
			;;
		--conversation=*)
			_arg_conversation="${_key##--conversation=}"
			;;

		--provider)
			test $# -lt 2 && die "Missing value for the option: '$_key'" 1
			_arg_provider="$2"
			shift
			;;
		--provider=*)
			_arg_provider="${_key##--provider=}"
			;;

		--stream)
			_arg_stream="on"
			;;
		--no-stream)
			_arg_stream="off"
			;;
		-h | --help)
			print_help
			exit 0
			;;
		-h*)
			print_help
			exit 0
			;;
		--verbose)
			if [ $# -lt 2 ]; then
				_verbose_level="$((_verbose_level + 1))"
			else
				_verbose_level="$2"
				shift
			fi
			;;
		--quiet)
			if [ $# -lt 2 ]; then
				_verbose_level="$((_verbose_level - 1))"
			else
				_verbose_level="-$2"
				shift
			fi
			;;

		*)
			_last_positional="$1"
			_positionals+=("$_last_positional")
			_positionals_count=$((_positionals_count + 1))
			;;
		esac
		shift
	done
}

handle_passed_args_count() {
	local _required_args_string="agent prompt"
	if [ "${_positionals_count}" -gt 2 ] && [ "$_helpHasBeenPrinted" == "1" ]; then
		_PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect at most 2 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}').\n\t${_positionals[*]}" 1
	fi
	if [ "${_positionals_count}" -lt 2 ] && [ "$_helpHasBeenPrinted" == "1" ]; then
		_PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 2 (namely: $_required_args_string), but got only ${_positionals_count}.
	${_positionals[*]}" 1
	fi
}

assign_positional_args() {
	local _positional_name _shift_for=$1
	_positional_names="_arg_agent _arg_prompt "
	shift "$_shift_for"
	for _positional_name in ${_positional_names}; do
		test $# -gt 0 || break
		eval "if [ \"\$_one_of${_positional_name}\" != \"\" ];then [[ \"\${_one_of${_positional_name}[*]}\" =~ \"\${1}\" ]];fi" || die "${_positional_name} must be one of: $(eval "echo \"\${_one_of${_positional_name}[*]}\"")" 1
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an ParseArger bug." 1
		shift
	done
}

print_debug() {
	print_help
	# shellcheck disable=SC2145
	echo "DEBUG: $0 $@"

	echo -e "	agent: ${_arg_agent}"
	echo -e "	prompt: ${_arg_prompt}"
	echo -e "	api: ${_arg_api}"
	echo -e "	api-key: ${_arg_api_key}"
	echo -e "	model: ${_arg_model}"
	echo -e "	system: ${_arg_system}"
	echo -e "	conversation: ${_arg_conversation}"
	echo -e "	provider: ${_arg_provider}"
	echo -e "	stream: ${_arg_stream}"

}

on_interrupt() {
	die Process aborted! 130
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"
trap on_interrupt INT

# @parseArger-parsing-end
# print_debug "$@"
# @parseArger-end

source "$_SCRIPT_DIR/../common"

# Build stream argument if needed
stream_arg=()
if [ "$_arg_stream" = "on" ]; then
	stream_arg=(--stream)
fi

# Handle command through common function
handle_agent_command \
	"$_arg_agent" \
	"$_arg_prompt" \
	"ask" \
	"$_arg_provider" \
	"$_arg_model" \
	"$_arg_system" \
	"$_arg_api" \
	"$_arg_api_key" \
	"$_arg_conversation" \
	"${stream_arg[@]}"
