#!/bin/bash

export AI_DEFAULT_PROVIDER="lmstudio"

get_llm_provider_url() {
  local provider="${1:-${AI_DEFAULT_PROVIDER}}"
  local url=""
  case "$provider" in
  "openai")
    url="https://api.openai.com/v1"
    ;;
  "lmstudio")
    url="http://localhost:1234/v1"
    ;;
  "ollama")
    url="http://localhost:11434/v1"
    ;;
  "openrouter")
    url="https://openrouter.ai/api/v1"
    ;;
  "deepseek")
    url="https://api.deepseek.com"
    ;;
  *)
    echo "Unsupported provider: $provider" 1
    exit 1
    ;;
  esac
  echo "${url}"
}

get_provider_credential() {
  local provider="${1:-${AI_DEFAULT_PROVIDER}}"
  local cred_file="$HOME/.config/ai-gents/credentials/${provider}"
  
  if [ -f "$cred_file" ]; then
    cat "$cred_file"
    return 0
  fi
  
  return 1
}

# Function to get agent config file path from name
get_agent_file() {
  local agent="$1"
  # First check if it's a file path
  if [ -f "$agent" ]; then
    echo "$agent"
    return 0
  fi

  # Then check if it's a URL
  if [[ "$agent" =~ ^https?:// ]]; then
    local tmp_file
    tmp_file="$(TMPDIR="${TMPDIR:-/tmp}" mktemp </dev/null)" || return 1
    if curl -fsSL "$agent" -o "$tmp_file"; then
      echo "$tmp_file"
      return 0
    fi
    rm -f "$tmp_file"
    return 1
  fi

  # Finally check if it's an agent name
  local config_file="$HOME/.config/ai-gents/agents/${agent}.yml"
  if [ -f "$config_file" ]; then
    echo "$config_file"
    return 0
  fi

  return 1
}

# Function to handle agent command building
handle_agent_command() {
  local agent="$1"
  local prompt="$2"
  local cmd_name="$3"
  local provider="$4"
  local model="$5"
  local system="$6"
  local api="$7"
  local api_key="$8"
  local conversation="$9"
  shift 9

  # Extract provider from model if in format provider:model
  if [ "$provider" = "" ] && [[ "$model" == *":"* ]]; then
    provider="${model%%:*}"
    model="${model#*:}"
  fi

  # Get agent configuration file
  local agent_file
  agent_file="$(get_agent_file "$agent")" || die "Could not find agent: $agent" 1

  # Process any tasks in the prompt
  local task_prompt
  task_prompt="$(parse_for_tasks "$prompt" "$agent_file")"
  if [ "$task_prompt" != "" ]; then
    # Add task prompts to system prompt
    if [ "$system" != "" ]; then
      system="$system"$'\n\n'"$task_prompt"
    else
      system="$task_prompt"
    fi
    # Remove task strings from prompt
    prompt="$(remove_task_from_prompt "$prompt")"
  fi

  # Get values from agent config for any parameter not provided by user
  if [ "$provider" = "" ]; then
    provider="$(yq -r '.model.provider' "$agent_file")"
  fi
  if [ "$model" = "" ]; then
    model="$(yq -r '.model.name' "$agent_file")"
  fi
  
  # Get model configuration parameters
  local temperature max_tokens top_p frequency_penalty presence_penalty stop seed logit_bias response_format structured_outputs
  temperature="$(yq -r '.model.temperature // ""' "$agent_file")"
  max_tokens="$(yq -r '.model.max_tokens // ""' "$agent_file")"
  top_p="$(yq -r '.model.top_p // ""' "$agent_file")"
  frequency_penalty="$(yq -r '.model.frequency_penalty // ""' "$agent_file")"
  presence_penalty="$(yq -r '.model.presence_penalty // ""' "$agent_file")"
  stop="$(yq -r '.model.stop // ""' "$agent_file")"
  seed="$(yq -r '.model.seed // ""' "$agent_file")"
  logit_bias="$(yq -r '.model.logit_bias // ""' "$agent_file")"
  response_format="$(yq -r '.model.response_format // ""' "$agent_file")"
  structured_outputs="$(yq -r '.model.structured_outputs // ""' "$agent_file")"

  # Get API key from credentials if not provided
  if [ "$api_key" = "" ] && [ "$provider" != "" ]; then
    api_key="$(get_provider_credential "$provider")"
  fi

  # Get agent system prompt and concatenate with user system if provided
  local agent_system
  agent_system="$(yq -r '.system.prompt' "$agent_file")"

#  tools break llm for now
#   # Get tools description and format them
#   local tools_prompt
#   tools_prompt="$(yq -r '.system.toolPrompt' "$agent_file")"
#   if [ "$tools_prompt" != "" ] && [ "$tools_prompt" != "null" ]; then
#     # Add tools description
#     if [ "$agent_system" != "" ]; then
#       agent_system="$agent_system

# $tools_prompt"
#     else
#       agent_system="$tools_prompt"
#     fi

#     # Add tools list
#     local tools_list
#     tools_list="$(yq -r '.tools.functions[] | "- " + .name + ": " + .description' "$agent_file")"
#     if [ "$tools_list" != "" ]; then
#       agent_system="$agent_system

# Available tools:
# $tools_list"
#     fi
#   fi

  # Add user system prompt if provided
  if [ "$agent_system" != "" ]; then
    if [ "$system" != "" ]; then
      system="$agent_system

$system"
    else
      system="$agent_system"
    fi
  fi

  # Clean up temporary file if it was a URL
  if [[ "$agent" =~ ^https?:// ]]; then
    rm -f "$agent_file"
  fi

  # Build command with all provided arguments
  local cmd=("$cmd_name" "$prompt")
  if [ "$api" != "" ]; then
    cmd+=(--api "$api")
  fi
  if [ "$api_key" != "" ]; then
    cmd+=(--api-key "$api_key")
  fi
  if [ "$model" != "" ]; then
    cmd+=(--model "$model")
  fi
  if [ "$system" != "" ]; then
    cmd+=(--system "$system")
  fi
  if [ "$conversation" != "" ]; then
    cmd+=(--conversation "$conversation")
  fi
  if [ "$provider" != "" ]; then
    cmd+=(--provider "$provider")
  fi

  # Add model configuration parameters if they exist
  [ -n "$temperature" ] && cmd+=(--temperature "$temperature")
  [ -n "$max_tokens" ] && cmd+=(--max_tokens "$max_tokens")
  [ -n "$top_p" ] && cmd+=(--top_p "$top_p")
  [ -n "$frequency_penalty" ] && cmd+=(--frequency_penalty "$frequency_penalty")
  [ -n "$presence_penalty" ] && cmd+=(--presence_penalty "$presence_penalty")
  [ -n "$stop" ] && cmd+=(--stop "$stop")
  [ -n "$seed" ] && cmd+=(--seed "$seed")
  [ -n "$logit_bias" ] && cmd+=(--logit_bias "$logit_bias")
  [ -n "$response_format" ] && cmd+=(--response_format "$response_format")
  [ -n "$structured_outputs" ] && cmd+=(--structured_outputs "$structured_outputs")

  # Add any additional arguments passed to the function
  cmd+=("$@")

  # Execute the command
  "${cmd[@]}"
}

parse_for_tasks() {
  local prompt="$1"
  local agent_file="$2"

  local task_prompt=""
  prompt_copy="$prompt"

  while [[ "$prompt_copy" == *"#/task"* ]]; do
    # Found #/task, get everything until ;
    task_part=${prompt_copy#*"#/task"}
    task_part=${task_part%%;*}
    task_part=${task_part#"${task_part%%[![:space:]]*}"}  # trim leading space
    # Get first word as task name, rest as user prompt
    read -r task_name user_prompt <<< "$task_part"
    
    # Get task prompt from agent file
    task_def="$(echo "$agent_file" | yq -r ".tasks.$task_name.prompt")"
    if [ "$task_def" != "null" ]; then
      task_prompt+="$task_def"$'\n'
      if [ "$user_prompt" != "" ]; then
        task_prompt+=$'\n'"$user_prompt"$'\n'
      fi
    fi
    
    # Remove this task and continue searching
    prompt_copy=${prompt_copy#*";"}
  done
  
  echo -e "$task_prompt"
}

remove_task_from_prompt() {
  local prompt="$1"
  prompt_copy="$prompt"
  
  while [[ "$prompt_copy" == *"#/task"* ]]; do
    # Get everything before #/task
    before_task=${prompt_copy%%"#/task"*}
    # Get everything after the semicolon
    after_task=${prompt_copy#*";"}
    # Combine them
    prompt_copy="$before_task$after_task"
  done
  
  echo "$prompt_copy"
}
