#!/bin/bash

# Check for user config file to override default provider
export AI_USER_CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/ai-gents"
if [ -f "$AI_USER_CONFIG_DIR/config" ]; then
    # Source the config file if it exists
    # shellcheck source=$HOME/.config/ai-gents/config
    source "$AI_USER_CONFIG_DIR/config"
fi

# Export the final provider value, using config if set, otherwise default
export AI_DEFAULT_PROVIDER="${AI_DEFAULT_PROVIDER:-ollama}"

# MCP server management functions
get_mcp_server_config() {
  local server_name="$1"
  local config_file="$AI_USER_CONFIG_DIR/mcp-servers.yml"
  
  if [ ! -f "$config_file" ]; then
    return 1
  fi
  
  yq -r ".mcpServers.\"$server_name\"" "$config_file"
}

start_mcp_server() {
  local server_name="$1"
  local server_config
  server_config="$(get_mcp_server_config "$server_name")" || return 1
  
  local command args
  command="$(echo "$server_config" | yq -r '.command')"
  args="$(echo "$server_config" | yq -r '.args[]')"
  
  # Create unique FIFO for this server instance
  local fifo_dir="${TMPDIR:-/tmp}/ai-gents-mcp"
  mkdir -p "$fifo_dir"
  local fifo="$fifo_dir/${server_name}.fifo"
  mkfifo "$fifo" 2>/dev/null || true
  
  # Start server in background
  $command $args < "$fifo" &
  local pid=$!
  echo "$pid" > "$fifo_dir/${server_name}.pid"
  
  # Return FIFO path for communication
  echo "$fifo"
}

send_mcp_request() {
  local server_name="$1"
  local method="$2"
  local params="$3"
  local fifo
  
  # Get or start server
  if [ -f "${TMPDIR:-/tmp}/ai-gents-mcp/${server_name}.fifo" ]; then
    fifo="${TMPDIR:-/tmp}/ai-gents-mcp/${server_name}.fifo"
  else
    fifo="$(start_mcp_server "$server_name")" || return 1
  fi
  
  # Construct JSON-RPC request
  local request
  request="$(yq -n \
    --arg method "$method" \
    --argjson params "$params" \
    '{jsonrpc: "2.0", id: 1, method: $method, params: $params}'
  )"
  
  # Send request and get response
  echo "$request" > "$fifo"
  read -r response < "$fifo"
  
  # Check for errors
  if echo "$response" | yq -e '.error' >/dev/null; then
    return 1
  fi
  
  echo "$response" | yq -r '.result'
}

get_llm_provider_url() {
  local provider="${1:-${AI_DEFAULT_PROVIDER}}"
  local url=""
  case "$provider" in
  "openai")
    url="https://${AI_OPENAI_HOST:-api.openai.com}/v1"
    ;;
  "anthropic")
    url="https://${AI_ANTHROPIC_HOST:-api.anthropic.com}/v1"
    ;;
  "lmstudio")
    url="http://${AI_LMSTUDIO_HOST:-localhost}:${AI_LMSTUDIO_PORT:-1234}/v1"
    ;;
  "ollama")
    url="http://${AI_OLLAMA_HOST:-localhost}:${AI_OLLAMA_PORT:-11434}/v1"
    ;;
  "openrouter")
    url="https://openrouter.ai/api/v1"
    ;;
  "deepseek")
    url="https://api.deepseek.com"
    ;;
  "mcp")
    # For MCP providers, URL is not needed as we use direct process communication
    url="mcp://${2:-default}"
    ;;
  *)
    echo "Unsupported provider: $provider" 1
    exit 1
    ;;
  esac
  echo "${url}"
}

get_default_model() {
  local provider="${1:-${AI_DEFAULT_PROVIDER}}"
  local model=""
  case "$provider" in
  "openai")
    model="${AI_OPENAI_MODEL:-gpt-4o-mini}"
    ;;
  "anthropic")
    model="${AI_ANTHROPIC_MODEL:-claude-3-5-haiku}"
    ;;
  "lmstudio")
    model="${AI_LMSTUDIO_MODEL:-llama-3.2-1b-instruct}"
    ;;
  "ollama")
    model="${AI_OLLAMA_MODEL:-llama-3.2-1b-instruct}"
    ;;
  "openrouter")
    model="${AI_OPENROUTER_MODEL:-"meta-llama/llama-3.2-1b-instruct:free"}"
    ;;
  "deepseek")
    model="${AI_DEEPSEEK_MODEL:-deepseek-v3}"
    ;;
  *)
    log "Unsupported provider: $provider" -3
    return 1
    ;;
  esac
  echo "${model}"
}

get_provider_credential() {
  local provider="${1:-${AI_DEFAULT_PROVIDER}}"
  local cred_file="$HOME/.config/ai-gents/credentials/${provider}"
  
  if [ -f "$cred_file" ]; then
    cat "$cred_file"
    return 0
  fi
  
  return 1
}

# Function to get agent config file path from name
get_agent_file() {
  local agent="$1"
  # First check if it's a file path
  if [ -f "$agent" ]; then
    cat "$agent"
    return 0
  fi

  # Then check if it's a URL
  if [[ "$agent" =~ ^https?:// ]]; then
    local tmp_file
    tmp_file="$(TMPDIR="${TMPDIR:-/tmp}" mktemp </dev/null)" || return 1
    if curl -fsSL "$agent" -o "$tmp_file"; then
      cat "$tmp_file"
      return 0
    fi
    rm -f "$tmp_file"
    return 1
  fi

  # Finally check if it's an agent name
  local config_file="$HOME/.config/ai-gents/agents/${agent}.yml"
  if [ -f "$config_file" ]; then
    cat "$config_file"
    return 0
  fi

  return 1
}

# Function to handle agent command building
handle_agent_command() {
  local agent="$1"
  local prompt="$2"
  local cmd_name="$3"
  local provider="$4"
  local model="$5"
  local system="$6"
  local api="$7"
  local api_key="$8"
  local conversation="$9"
  local log="${10}"
  shift 10

  # Extract provider from model if in format provider:model
  if [ "$provider" = "" ] && [[ "$model" == *":"* ]]; then
    provider="${model%%:*}"
    model="${model#*:}"
  fi

  # Get agent configuration file
  local agent_file
  agent_file="$(get_agent_file "$agent")" || die "Could not find agent: $agent" 1

  # Process any tasks in the prompt
  local task_prompt
  task_prompt="$(parse_for_tasks "$prompt" "$agent_file")"
  
  if [ "$task_prompt" != "" ]; then
    # Add task prompts to system prompt
    if [ "$system" != "" ]; then
      system="$system"$'\n\n'"$task_prompt"
    else
      system="$task_prompt"
    fi
    # Remove task strings from prompt
    prompt="$(remove_task_from_prompt "$prompt")"
  fi

  # Get values from agent config for any parameter not provided by user
  if [ "$provider" = "" ]; then
    provider="$(echo -e "$agent_file" | yq -r '.model.provider')"
  fi
  if [ "$model" = "" ]; then
    model="$(echo -e "$agent_file" | yq -r '.model.name')"
  fi
  
  # Get model configuration parameters
  local temperature max_tokens top_p frequency_penalty presence_penalty stop seed logit_bias response_format structured_outputs
  temperature="$(echo -e "$agent_file" | yq -r '.model.temperature // ""')"
  max_tokens="$(echo -e "$agent_file" | yq -r '.model.max_tokens // ""')"
  top_p="$(echo -e "$agent_file" | yq -r '.model.top_p // ""')"
  frequency_penalty="$(echo -e "$agent_file" | yq -r '.model.frequency_penalty // ""')"
  presence_penalty="$(echo -e "$agent_file" | yq -r '.model.presence_penalty // ""')"
  stop="$(echo -e "$agent_file" | yq -r '.model.stop // ""')"
  seed="$(echo -e "$agent_file" | yq -r '.model.seed // ""')"
  logit_bias="$(echo -e "$agent_file" | yq -r '.model.logit_bias // ""')"
  response_format="$(echo -e "$agent_file" | yq -r '.model.response_format // ""')"
  structured_outputs="$(echo -e "$agent_file" | yq -r '.model.structured_outputs // ""')"

  # Get API key from credentials if not provided
  if [ "$api_key" = "" ] && [ "$provider" != "" ]; then
    api_key="$(get_provider_credential "$provider")"
  fi

  # Get agent system prompt and concatenate with user system if provided
  local agent_system
  agent_system="$(echo -e "$agent_file" | yq -r '.system.prompt')"

#  # tools break llm for now, **AI DO NOT REMOVE EVER !**
#   # Get tools description and format them
#   local tools_prompt
#   tools_prompt="$(yq -r '.system.toolPrompt' "$agent_file")"
#   if [ "$tools_prompt" != "" ] && [ "$tools_prompt" != "null" ]; then
#     # Add tools description
#     if [ "$agent_system" != "" ]; then
#       agent_system="$agent_system

# $tools_prompt"
#     else
#       agent_system="$tools_prompt"
#     fi

#     # Add tools list
#     local tools_list
#     tools_list="$(yq -r '.tools.functions[] | "- " + .name + ": " + .description' "$agent_file")"
#     if [ "$tools_list" != "" ]; then
#       agent_system="$agent_system

# Available tools:
# $tools_list"
#     fi
#   fi

  # Add user system prompt if provided
  if [ "$agent_system" != "" ]; then
    if [ "$system" != "" ]; then
      system="$agent_system

$system"
    else
      system="$agent_system"
    fi
  fi

  # Clean up temporary file if it was a URL
  # if [[ "$agent" =~ ^https?:// ]]; then
  #   rm -f "$agent_file"
  # fi

  # Build command with all provided arguments
  local cmd=("${AI_GENTS_DIR}/ai" "$cmd_name" "$prompt")
  if [ "$api" != "" ]; then
    cmd+=(--api "$api")
  fi
  if [ "$api_key" != "" ]; then
    cmd+=(--api-key "$api_key")
  fi
  if [ "$model" != "" ]; then
    cmd+=(--model "$model")
  fi
  if [ "$system" != "" ]; then
    cmd+=(--system "$system")
  fi
  if [ "$conversation" != "" ]; then
    cmd+=(--conversation "$conversation")
  fi
  if [ "$provider" != "" ]; then
    cmd+=(--provider "$provider")
  fi
  if [ "$log" != "" ]; then
    cmd+=(--log "$log")
  fi

  # Add model configuration parameters if they exist
  [ -n "$temperature" ] && cmd+=(--temperature "$temperature")
  [ -n "$max_tokens" ] && cmd+=(--max_tokens "$max_tokens")
  [ -n "$top_p" ] && cmd+=(--top_p "$top_p")
  [ -n "$frequency_penalty" ] && cmd+=(--frequency_penalty "$frequency_penalty")
  [ -n "$presence_penalty" ] && cmd+=(--presence_penalty "$presence_penalty")
  [ -n "$stop" ] && cmd+=(--stop "$stop")
  [ -n "$seed" ] && cmd+=(--seed "$seed")
  [ -n "$logit_bias" ] && cmd+=(--logit_bias "$logit_bias")
  [ -n "$response_format" ] && cmd+=(--response_format "$response_format")
  [ -n "$structured_outputs" ] && cmd+=(--structured_outputs "$structured_outputs")

  # Add any additional arguments passed to the function
  cmd+=("$@")

  # Execute the command
  "${cmd[@]}"
}

parse_for_tasks() {
  local prompt="$1"
  local agent_string="$2"

  local task_prompt=""
  prompt_copy="$prompt"

  while [[ "$prompt_copy" == *"#/task"* ]]; do
    # Found #/task, get everything until ;
    task_part=${prompt_copy#*"#/task"}
    task_part=${task_part%%;*}
    task_part=${task_part#"${task_part%%[![:space:]]*}"}  # trim leading space
    # Get first word as task name, rest as user prompt
    read -r task_name user_prompt <<< "$task_part"
    
    # Get task prompt from agent file
    task_def="$(echo "$agent_string" | yq -r ".tasks.$task_name.prompt")"
    if [ "$task_def" != "null" ]; then
      task_prompt+="$task_def"$'\n'
      if [ "$user_prompt" != "" ]; then
        task_prompt+=$'\n'"$user_prompt"$'\n'
      fi
    fi
    
    # Remove this task and continue searching
    prompt_copy=${prompt_copy#*";"}
  done
  
  echo -e "$task_prompt"
}

remove_task_from_prompt() {
  local prompt="$1"
  prompt_copy="$prompt"
  
  while [[ "$prompt_copy" == *"#/task"* ]]; do
    # Get everything before #/task
    before_task=${prompt_copy%%"#/task"*}
    # Get everything after the semicolon
    after_task=${prompt_copy#*";"}
    # Combine them
    prompt_copy="$before_task$after_task"
  done
  
  echo "$prompt_copy"
}

function extract_code_blocks() {
  local content="$1"
  local remove_language="${2:-0}"
  local language="$3"
  local -a blocks=()
  local inside_block=false
  local current_block=""
  local current_language=""
  local block=""
  local block_count=0
  
  # Convert content to use temporary delimiter for processing
  content="${content//$'\0'/_NULLBYTE_}"
  
  while IFS= read -r line || [ -n "$line" ]; do
    if [[ "$line" =~ ^[[:space:]]*\`\`\`(.*) ]]; then
      if [ "$inside_block" = false ]; then
        # Start of code block
        inside_block=true
        current_language="${BASH_REMATCH[1]}"
        current_block=""
        block=""
        ((block_count++))
      else
        # End of code block
        inside_block=false
        
        # Join all lines of current block into single string
        block="$current_block"
        
        # If language filter is specified, check if block matches
        if [ -n "$language" ]; then
          if [[ "$current_language" =~ ^[[:space:]]*$language([[:space:]]|$) ]]; then
            if [ "$remove_language" = "1" ]; then
              blocks+=("$block")
            else
              blocks+=("${current_language}"$'\n'"$block")
            fi
          fi
        else
          # No language filter, include all blocks
          if [ "$remove_language" = "1" ]; then
            blocks+=("$block")
          else
            blocks+=("${current_language}"$'\n'"$block")
          fi
        fi
      fi
    elif [ "$inside_block" = true ]; then
      # Inside a block, append the line
      if [ -n "$current_block" ]; then
        current_block+=$'\n'
      fi
      current_block+="$line"
    fi
  done < <(printf '%s\n' "$content")
    
  # Output blocks separated by null bytes with preserved internal newlines
  for block in "${blocks[@]}"; do
    # Restore original newlines and encode as temporary markers
    block="${block//_NULLBYTE_/$'\n'}"
    printf '%s\0' "$block"
  done
}